image: golang:1.13.4

variables:
    REPO_NAME: message-scheduler
    IMAGE_NAME: message-scheduler-prod
    BUILD_PATH: /builds/masterback/message-scheduler


stages:
    - build
    - deploy&copy
    - deploy&compose
    - message_on_success
    - message_on_failure



# компиляция исполняемого файла и создание директории ./deploy
build:
    stage: build
    script:
        # Копируем файлы в /go/src и переходим туда
        - mkdir -p /go/src/$REPO_NAME
        - cp -r .  /go/src/$REPO_NAME
        - cd       /go/src/$REPO_NAME

        # компилируем и строим директорию ./deploy
        - sh/build-deploy-directory.sh

        # Обновляем файлы в текущей директории ./deploy
        - rm -rf   $BUILD_PATH/deploy
        - cp -r    deploy $BUILD_PATH
        # - mkdir -p $BUILD_PATH/deploy/configs
    artifacts:
        paths:
            - $BUILD_PATH/deploy
        expire_in: 60 minutes
    only:
        - production


# копирование файлов на боевой сервер
deploy&copy:
    stage: deploy&copy
    dependencies:
        - build
    script:
        - ./.import-ssh-key.sh "$PROD_RSA_PRIVATE_KEY"
        # remove old dir on the server
        - ssh gitupdater@dockerweb.rgwork.ru 'rm -rf /home/gitupdater/'$IMAGE_NAME
        # copy new dir on server
        - scp -pr $BUILD_PATH/deploy gitupdater@dockerweb.rgwork.ru:/home/gitupdater/$IMAGE_NAME
    only:
        - production



# запуск контейнера на боевом сервере
deploy&compose:
    stage: deploy&compose
    dependencies:
        - deploy&copy
    script:
        - ./.import-ssh-key.sh "$DEPLOY_RSA_PRIVATE_KEY"
        # !!! start real deploy and docker-compose
        - ssh gitupdater@notify.rg.ru message-scheduler-prod
    only:
        - production


# сообщение об успешном завершении
message_on_success:
    stage: message_on_success
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_success
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9C%85%20Success.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20completed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production



# сообщение об ошибке
message_on_failure:
    stage: message_on_failure
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_failure
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9D%8C%20Error.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20failed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production
